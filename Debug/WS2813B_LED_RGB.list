
WS2813B_LED_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a40  08004a40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a48  08004a48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  2000000c  08004a5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08004a5c  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112bc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ac  00000000  00000000  000312f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c24  00000000  00000000  00035620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119f1  00000000  00000000  0005c244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f004c  00000000  00000000  0006dc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015dc81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  0015dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048e0 	.word	0x080048e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048e0 	.word	0x080048e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_DMA_Init+0x38>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <MX_DMA_Init+0x38>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6493      	str	r3, [r2, #72]	; 0x48
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_DMA_Init+0x38>)
 80004d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	200f      	movs	r0, #15
 80004e4:	f000 fd79 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e8:	200f      	movs	r0, #15
 80004ea:	f000 fd92 	bl	8001012 <HAL_NVIC_EnableIRQ>

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a24      	ldr	r2, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_GPIO_Init+0xc4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_GPIO_Init+0xc4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2120      	movs	r1, #32
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f001 f907 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0xc8>)
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000594:	f000 ff50 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000598:	2320      	movs	r3, #32
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 ff41 	bl	8001438 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10210000 	.word	0x10210000
 80005c8:	48000800 	.word	0x48000800

080005cc <led_init>:
		144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
		177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
		215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

void led_init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0; i < NUMBER_OF_LEDS; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	e008      	b.n	80005ea <led_init+0x1e>
	{
		led_set_one_led_colors(i, 0, 0, 0);
 80005d8:	2300      	movs	r3, #0
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f82e 	bl	8000640 <led_set_one_led_colors>
	for(i=0; i < NUMBER_OF_LEDS; i++)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b1d      	cmp	r3, #29
 80005ee:	d9f3      	bls.n	80005d8 <led_init+0xc>
	}

	leds_buffer.stop = LED_COMM_RESET_STATE;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <led_init+0x34>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028

08000604 <led_set_all_led_colors>:

void led_set_all_led_colors(uint8_t green, uint8_t red, uint8_t blue)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	uint32_t i;

	for(i=0; i < NUMBER_OF_LEDS; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e008      	b.n	800062e <led_set_all_led_colors+0x2a>
	{
		led_set_one_led_colors(i, green, red, blue);
 800061c:	797b      	ldrb	r3, [r7, #5]
 800061e:	79ba      	ldrb	r2, [r7, #6]
 8000620:	79f9      	ldrb	r1, [r7, #7]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f000 f80c 	bl	8000640 <led_set_one_led_colors>
	for(i=0; i < NUMBER_OF_LEDS; i++)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b1d      	cmp	r3, #29
 8000632:	d9f3      	bls.n	800061c <led_set_all_led_colors+0x18>
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <led_set_one_led_colors>:

void led_set_one_led_colors(uint32_t led_number, uint8_t green, uint8_t red, uint8_t blue)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	4608      	mov	r0, r1
 800064a:	4611      	mov	r1, r2
 800064c:	461a      	mov	r2, r3
 800064e:	4603      	mov	r3, r0
 8000650:	70fb      	strb	r3, [r7, #3]
 8000652:	460b      	mov	r3, r1
 8000654:	70bb      	strb	r3, [r7, #2]
 8000656:	4613      	mov	r3, r2
 8000658:	707b      	strb	r3, [r7, #1]
	led_set_colors_data(&(leds_buffer.leds[led_number]), green, red, blue);
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <led_set_one_led_colors+0x3c>)
 8000666:	1898      	adds	r0, r3, r2
 8000668:	787b      	ldrb	r3, [r7, #1]
 800066a:	78ba      	ldrb	r2, [r7, #2]
 800066c:	78f9      	ldrb	r1, [r7, #3]
 800066e:	f000 f807 	bl	8000680 <led_set_colors_data>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028

08000680 <led_set_colors_data>:

void led_set_colors_data(struct rgb_led *led, uint8_t green, uint8_t red, uint8_t blue)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4603      	mov	r3, r0
 8000690:	70fb      	strb	r3, [r7, #3]
 8000692:	460b      	mov	r3, r1
 8000694:	70bb      	strb	r3, [r7, #2]
 8000696:	4613      	mov	r3, r2
 8000698:	707b      	strb	r3, [r7, #1]
	led_convert_color_data_to_ws2812b_format(gamma_correction[green], led->green);
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <led_set_colors_data+0x58>)
 800069e:	5cd3      	ldrb	r3, [r2, r3]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f819 	bl	80006dc <led_convert_color_data_to_ws2812b_format>
	led_convert_color_data_to_ws2812b_format(gamma_correction[red], led->red);
 80006aa:	78bb      	ldrb	r3, [r7, #2]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <led_set_colors_data+0x58>)
 80006ae:	5cd2      	ldrb	r2, [r2, r3]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3308      	adds	r3, #8
 80006b4:	4619      	mov	r1, r3
 80006b6:	4610      	mov	r0, r2
 80006b8:	f000 f810 	bl	80006dc <led_convert_color_data_to_ws2812b_format>
	led_convert_color_data_to_ws2812b_format(gamma_correction[blue], led->blue);
 80006bc:	787b      	ldrb	r3, [r7, #1]
 80006be:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <led_set_colors_data+0x58>)
 80006c0:	5cd2      	ldrb	r2, [r2, r3]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3310      	adds	r3, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	4610      	mov	r0, r2
 80006ca:	f000 f807 	bl	80006dc <led_convert_color_data_to_ws2812b_format>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	080048f8 	.word	0x080048f8

080006dc <led_convert_color_data_to_ws2812b_format>:

void led_convert_color_data_to_ws2812b_format(uint8_t color_data, uint8_t *buffer)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i<BIT_IN_BYTES; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e019      	b.n	8000722 <led_convert_color_data_to_ws2812b_format+0x46>
	{
		if(((color_data >> i) & 0x01) == 1)
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	fa42 f303 	asr.w	r3, r2, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <led_convert_color_data_to_ws2812b_format+0x32>
		{
			*(buffer+(BIT_IN_BYTES-i-1)) = LED_COMM_HIGH_STATE;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	f1c3 0307 	rsb	r3, r3, #7
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	4413      	add	r3, r2
 8000708:	2240      	movs	r2, #64	; 0x40
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	e006      	b.n	800071c <led_convert_color_data_to_ws2812b_format+0x40>
		}
		else
		{
			*(buffer+(BIT_IN_BYTES-i-1)) = LED_COMM_LOW_STATE;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f1c3 0307 	rsb	r3, r3, #7
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	4413      	add	r3, r2
 8000718:	2218      	movs	r2, #24
 800071a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<BIT_IN_BYTES; i++)
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d9e2      	bls.n	80006ee <led_convert_color_data_to_ws2812b_format+0x12>
		}
	}
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <led_send_led_colors_to_head>:

void led_send_led_colors_to_head(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds_buffer.bytes, HEAD_LEDS_BUFFER_SIZE);
 800073c:	f240 23d1 	movw	r3, #721	; 0x2d1
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <led_send_led_colors_to_head+0x18>)
 8000742:	2100      	movs	r1, #0
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <led_send_led_colors_to_head+0x1c>)
 8000746:	f002 fc33 	bl	8002fb0 <HAL_TIM_PWM_Start_DMA>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028
 8000754:	20000344 	.word	0x20000344

08000758 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	if(TIM2 == htim->Instance)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000768:	d103      	bne.n	8000772 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800076a:	2100      	movs	r1, #0
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800076e:	f002 fb89 	bl	8002e84 <HAL_TIM_PWM_Stop>
	}
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000344 	.word	0x20000344

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fad1 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f859 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f7ff feb5 	bl	80004fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000792:	f7ff fe95 	bl	80004c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000796:	f000 fa2d 	bl	8000bf4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800079a:	f000 f955 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  led_init();
 800079e:	f7ff ff15 	bl	80005cc <led_init>

  uint32_t time;
  uint32_t time_max_ms = 100;
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	603b      	str	r3, [r7, #0]
  uint8_t state = 0, led = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	72fb      	strb	r3, [r7, #11]
 80007aa:	2300      	movs	r3, #0
 80007ac:	72bb      	strb	r3, [r7, #10]
  uint8_t g,r,b;

  time = HAL_GetTick();
 80007ae:	f000 fb2d 	bl	8000e0c <HAL_GetTick>
 80007b2:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - time) > time_max_ms)
 80007b4:	f000 fb2a 	bl	8000e0c <HAL_GetTick>
 80007b8:	4602      	mov	r2, r0
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d2f7      	bcs.n	80007b4 <main+0x34>
	  {
		  time = HAL_GetTick();
 80007c4:	f000 fb22 	bl	8000e0c <HAL_GetTick>
 80007c8:	60f8      	str	r0, [r7, #12]

		  if(0 == state)
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d106      	bne.n	80007de <main+0x5e>
		  {
			  g = 255;
 80007d0:	23ff      	movs	r3, #255	; 0xff
 80007d2:	727b      	strb	r3, [r7, #9]
			  r = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	723b      	strb	r3, [r7, #8]
			  b = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	e012      	b.n	8000804 <main+0x84>
		  }
		  else if (1 == state)
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d106      	bne.n	80007f2 <main+0x72>
		  {
			  g = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	727b      	strb	r3, [r7, #9]
			  r = 255;
 80007e8:	23ff      	movs	r3, #255	; 0xff
 80007ea:	723b      	strb	r3, [r7, #8]
			  b = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	e008      	b.n	8000804 <main+0x84>
		  }
		  else if (2 == state)
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d105      	bne.n	8000804 <main+0x84>
		  {
			  g = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	727b      	strb	r3, [r7, #9]
			  r = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	723b      	strb	r3, [r7, #8]
			  b = 255;
 8000800:	23ff      	movs	r3, #255	; 0xff
 8000802:	71fb      	strb	r3, [r7, #7]
		  }

		  led_set_all_led_colors(0, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff fefb 	bl	8000604 <led_set_all_led_colors>
		  led_set_one_led_colors(led, g, r ,b);
 800080e:	7ab8      	ldrb	r0, [r7, #10]
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	7a3a      	ldrb	r2, [r7, #8]
 8000814:	7a79      	ldrb	r1, [r7, #9]
 8000816:	f7ff ff13 	bl	8000640 <led_set_one_led_colors>
		  led_send_led_colors_to_head();
 800081a:	f7ff ff8d 	bl	8000738 <led_send_led_colors_to_head>

		  led++;
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	3301      	adds	r3, #1
 8000822:	72bb      	strb	r3, [r7, #10]

		  if(led >= NUMBER_OF_LEDS)
 8000824:	7abb      	ldrb	r3, [r7, #10]
 8000826:	2b1d      	cmp	r3, #29
 8000828:	d904      	bls.n	8000834 <main+0xb4>
		  {
			  led = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	72bb      	strb	r3, [r7, #10]
			  state++;
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	3301      	adds	r3, #1
 8000832:	72fb      	strb	r3, [r7, #11]
		  }

		  if(state >= 3)
 8000834:	7afb      	ldrb	r3, [r7, #11]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d9bc      	bls.n	80007b4 <main+0x34>
		  {
			  state = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	72fb      	strb	r3, [r7, #11]
	  if((HAL_GetTick() - time) > time_max_ms)
 800083e:	e7b9      	b.n	80007b4 <main+0x34>

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0b8      	sub	sp, #224	; 0xe0
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 f83e 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2288      	movs	r2, #136	; 0x88
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f004 f830 	bl	80048d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000896:	230a      	movs	r3, #10
 8000898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800089c:	2307      	movs	r3, #7
 800089e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffe6 	bl	8001884 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008be:	f000 f834 	bl	800092a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2303      	movs	r3, #3
 80008ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008e4:	2104      	movs	r1, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fbb2 	bl	8002050 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008f2:	f000 f81a 	bl	800092a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fdab 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800090c:	f000 f80d 	bl	800092a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000910:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000914:	f000 ff60 	bl	80017d8 <HAL_PWREx_ControlVoltageScaling>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800091e:	f000 f804 	bl	800092a <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	37e0      	adds	r7, #224	; 0xe0
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6613      	str	r3, [r2, #96]	; 0x60
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6593      	str	r3, [r2, #88]	; 0x58
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 fa0c 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <DMA1_Channel5_IRQHandler+0x10>)
 80009d6:	f000 fc4f 	bl	8001278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002fc 	.word	0x200002fc

080009e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <SystemInit+0x5c>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <SystemInit+0x5c>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <SystemInit+0x60>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <SystemInit+0x60>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <SystemInit+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <SystemInit+0x60>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <SystemInit+0x60>)
 8000a10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <SystemInit+0x60>)
 8000a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <SystemInit+0x60>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <SystemInit+0x60>)
 8000a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SystemInit+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	40021000 	.word	0x40021000

08000a48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a82:	2263      	movs	r2, #99	; 0x63
 8000a84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000a94:	f002 f99e 	bl	8002dd4 <HAL_TIM_PWM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a9e:	f7ff ff44 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000ab2:	f003 fa21 	bl	8003ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000abc:	f7ff ff35 	bl	800092a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac0:	2360      	movs	r3, #96	; 0x60
 8000ac2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000ad8:	f002 fc82 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ae2:	f7ff ff22 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_TIM2_Init+0xac>)
 8000ae8:	f000 f850 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000344 	.word	0x20000344

08000af8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b08:	d135      	bne.n	8000b76 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_TIM_PWM_MspInit+0x88>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <HAL_TIM_PWM_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_TIM_PWM_MspInit+0x88>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_TIM_PWM_MspInit+0x90>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b30:	2210      	movs	r2, #16
 8000b32:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b46:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b5c:	f000 fa74 	bl	8001048 <HAL_DMA_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000b66:	f7ff fee0 	bl	800092a <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	200002fc 	.word	0x200002fc
 8000b88:	40020058 	.word	0x40020058

08000b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d11c      	bne.n	8000be8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_TIM_MspPostInit+0x64>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_TIM_MspPostInit+0x64>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_TIM_MspPostInit+0x64>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 fc28 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c38:	f003 f9e6 	bl	8004008 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f7ff fe72 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000390 	.word	0x20000390
 8000c50:	40004400 	.word	0x40004400

08000c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d128      	bne.n	8000cc8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f000 fbb8 	bl	8001438 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff fe82 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ce2:	e003      	b.n	8000cec <LoopCopyDataInit>

08000ce4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ce6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cea:	3104      	adds	r1, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cf2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf4:	d3f6      	bcc.n	8000ce4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf8:	e002      	b.n	8000d00 <LoopFillZerobss>

08000cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cfc:	f842 3b04 	str.w	r3, [r2], #4

08000d00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <LoopForever+0x16>)
	cmp	r2, r3
 8000d02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d04:	d3f9      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 fdbf 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fd39 	bl	8000780 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d14:	08004a50 	.word	0x08004a50
	ldr	r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d24:	20000418 	.word	0x20000418

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_Init+0x3c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_Init+0x3c>)
 8000d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 f93e 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 f80f 	bl	8000d6c <HAL_InitTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e001      	b.n	8000d5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5a:	f7ff fdeb 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_InitTick+0x6c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d023      	beq.n	8000dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_InitTick+0x70>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_InitTick+0x6c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f949 	bl	800102e <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d809      	bhi.n	8000dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f913 	bl	8000fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_InitTick+0x74>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e007      	b.n	8000dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e004      	b.n	8000dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e001      	b.n	8000dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000414 	.word	0x20000414

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000414 	.word	0x20000414

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e098      	b.n	800118c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_DMA_Init+0x150>)
 8001062:	429a      	cmp	r2, r3
 8001064:	d80f      	bhi.n	8001086 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <HAL_DMA_Init+0x154>)
 800106e:	4413      	add	r3, r2
 8001070:	4a4b      	ldr	r2, [pc, #300]	; (80011a0 <HAL_DMA_Init+0x158>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_DMA_Init+0x15c>)
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
 8001084:	e00e      	b.n	80010a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_DMA_Init+0x160>)
 800108e:	4413      	add	r3, r2
 8001090:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <HAL_DMA_Init+0x158>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	009a      	lsls	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a42      	ldr	r2, [pc, #264]	; (80011ac <HAL_DMA_Init+0x164>)
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2202      	movs	r2, #2
 80010a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010fe:	d039      	beq.n	8001174 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <HAL_DMA_Init+0x15c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11a      	bne.n	8001140 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_DMA_Init+0x168>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f003 031c 	and.w	r3, r3, #28
 8001116:	210f      	movs	r1, #15
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4924      	ldr	r1, [pc, #144]	; (80011b0 <HAL_DMA_Init+0x168>)
 8001120:	4013      	ands	r3, r2
 8001122:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_DMA_Init+0x168>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f003 031c 	and.w	r3, r3, #28
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	491d      	ldr	r1, [pc, #116]	; (80011b0 <HAL_DMA_Init+0x168>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
 800113e:	e019      	b.n	8001174 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_DMA_Init+0x16c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f003 031c 	and.w	r3, r3, #28
 800114c:	210f      	movs	r1, #15
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	4917      	ldr	r1, [pc, #92]	; (80011b4 <HAL_DMA_Init+0x16c>)
 8001156:	4013      	ands	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_DMA_Init+0x16c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6859      	ldr	r1, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 031c 	and.w	r3, r3, #28
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	4911      	ldr	r1, [pc, #68]	; (80011b4 <HAL_DMA_Init+0x16c>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40020407 	.word	0x40020407
 800119c:	bffdfff8 	.word	0xbffdfff8
 80011a0:	cccccccd 	.word	0xcccccccd
 80011a4:	40020000 	.word	0x40020000
 80011a8:	bffdfbf8 	.word	0xbffdfbf8
 80011ac:	40020400 	.word	0x40020400
 80011b0:	400200a8 	.word	0x400200a8
 80011b4:	400204a8 	.word	0x400204a8

080011b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_DMA_Start_IT+0x20>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e04b      	b.n	8001270 <HAL_DMA_Start_IT+0xb8>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d13a      	bne.n	8001262 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2202      	movs	r2, #2
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f8e0 	bl	80013d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 020e 	orr.w	r2, r2, #14
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e00f      	b.n	8001250 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 020a 	orr.w	r2, r2, #10
 800124e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e005      	b.n	800126e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800126a:	2302      	movs	r3, #2
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	f003 031c 	and.w	r3, r3, #28
 8001298:	2204      	movs	r2, #4
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d026      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x7a>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d021      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0320 	and.w	r3, r3, #32
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d107      	bne.n	80012cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0204 	bic.w	r2, r2, #4
 80012ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f003 021c 	and.w	r2, r3, #28
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	2104      	movs	r1, #4
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d071      	beq.n	80013cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80012f0:	e06c      	b.n	80013cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f003 031c 	and.w	r3, r3, #28
 80012fa:	2202      	movs	r2, #2
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d02e      	beq.n	8001364 <HAL_DMA_IRQHandler+0xec>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d029      	beq.n	8001364 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10b      	bne.n	8001336 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020a 	bic.w	r2, r2, #10
 800132c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f003 021c 	and.w	r2, r3, #28
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	2102      	movs	r1, #2
 8001344:	fa01 f202 	lsl.w	r2, r1, r2
 8001348:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d038      	beq.n	80013cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001362:	e033      	b.n	80013cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f003 031c 	and.w	r3, r3, #28
 800136c:	2208      	movs	r2, #8
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d02a      	beq.n	80013ce <HAL_DMA_IRQHandler+0x156>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d025      	beq.n	80013ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 020e 	bic.w	r2, r2, #14
 8001390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f003 021c 	and.w	r2, r3, #28
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
}
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f003 021c 	and.w	r2, r3, #28
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d108      	bne.n	800141a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001418:	e007      	b.n	800142a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	60da      	str	r2, [r3, #12]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e17f      	b.n	8001748 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8171 	beq.w	8001742 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d00b      	beq.n	8001480 <HAL_GPIO_Init+0x48>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d007      	beq.n	8001480 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001474:	2b11      	cmp	r3, #17
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b12      	cmp	r3, #18
 800147e:	d130      	bne.n	80014e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b6:	2201      	movs	r2, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d118      	bne.n	8001520 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x128>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b12      	cmp	r3, #18
 800155e:	d123      	bne.n	80015a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	6939      	ldr	r1, [r7, #16]
 80015a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0203 	and.w	r2, r3, #3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80ac 	beq.w	8001742 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_GPIO_Init+0x330>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_GPIO_Init+0x330>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	; 0x60
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_GPIO_Init+0x330>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001602:	4a5a      	ldr	r2, [pc, #360]	; (800176c <HAL_GPIO_Init+0x334>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x242>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_GPIO_Init+0x338>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x23e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_GPIO_Init+0x33c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x23a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <HAL_GPIO_Init+0x340>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x236>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_GPIO_Init+0x344>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x232>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <HAL_GPIO_Init+0x348>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x22e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x34c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x22a>
 800165e:	2306      	movs	r3, #6
 8001660:	e00c      	b.n	800167c <HAL_GPIO_Init+0x244>
 8001662:	2307      	movs	r3, #7
 8001664:	e00a      	b.n	800167c <HAL_GPIO_Init+0x244>
 8001666:	2305      	movs	r3, #5
 8001668:	e008      	b.n	800167c <HAL_GPIO_Init+0x244>
 800166a:	2304      	movs	r3, #4
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x244>
 800166e:	2303      	movs	r3, #3
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x244>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x244>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x244>
 800167a:	2300      	movs	r3, #0
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800168c:	4937      	ldr	r1, [pc, #220]	; (800176c <HAL_GPIO_Init+0x334>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_GPIO_Init+0x350>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_GPIO_Init+0x350>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_GPIO_Init+0x350>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e8:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_GPIO_Init+0x350>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_GPIO_Init+0x350>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_GPIO_Init+0x350>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x350>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_GPIO_Init+0x350>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	f47f ae78 	bne.w	8001448 <HAL_GPIO_Init+0x10>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	48000400 	.word	0x48000400
 8001774:	48000800 	.word	0x48000800
 8001778:	48000c00 	.word	0x48000c00
 800177c:	48001000 	.word	0x48001000
 8001780:	48001400 	.word	0x48001400
 8001784:	48001800 	.word	0x48001800
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000

080017d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e6:	d130      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f4:	d038      	beq.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2232      	movs	r2, #50	; 0x32
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9b      	lsrs	r3, r3, #18
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800181c:	e002      	b.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3b01      	subs	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001830:	d102      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f2      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001844:	d110      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e00f      	b.n	800186a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001856:	d007      	beq.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001860:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40007000 	.word	0x40007000
 800187c:	20000000 	.word	0x20000000
 8001880:	431bde83 	.word	0x431bde83

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e3d4      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001896:	4ba1      	ldr	r3, [pc, #644]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a0:	4b9e      	ldr	r3, [pc, #632]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80e4 	beq.w	8001a80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_RCC_OscConfig+0x4a>
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	f040 808b 	bne.w	80019dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	f040 8087 	bne.w	80019dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ce:	4b93      	ldr	r3, [pc, #588]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x62>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e3ac      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4b8c      	ldr	r3, [pc, #560]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_RCC_OscConfig+0x7c>
 80018f6:	4b89      	ldr	r3, [pc, #548]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fe:	e005      	b.n	800190c <HAL_RCC_OscConfig+0x88>
 8001900:	4b86      	ldr	r3, [pc, #536]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190c:	4293      	cmp	r3, r2
 800190e:	d223      	bcs.n	8001958 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fd41 	bl	800239c <RCC_SetFlashLatencyFromMSIRange>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e38d      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001924:	4b7d      	ldr	r3, [pc, #500]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a7c      	ldr	r2, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b7a      	ldr	r3, [pc, #488]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4977      	ldr	r1, [pc, #476]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4972      	ldr	r1, [pc, #456]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
 8001956:	e025      	b.n	80019a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6f      	ldr	r2, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	496a      	ldr	r1, [pc, #424]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001976:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4965      	ldr	r1, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fd01 	bl	800239c <RCC_SetFlashLatencyFromMSIRange>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e34d      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a4:	f000 fc36 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	495a      	ldr	r1, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x29c>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_OscConfig+0x2a0>)
 80019c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x2a4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f9cf 	bl	8000d6c <HAL_InitTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d052      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	e331      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019e4:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa0c 	bl	8000e0c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f8:	f7ff fa08 	bl	8000e0c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e31a      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a40      	ldr	r2, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	493b      	ldr	r1, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	4936      	ldr	r1, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e01a      	b.n	8001a80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f9d9 	bl	8000e0c <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f9d5 	bl	8000e0c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e2e7      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1da>
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d074      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x21a>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d10e      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d064      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d160      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e2c4      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x24a>
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e01d      	b.n	8001b0a <HAL_RCC_OscConfig+0x286>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x26e>
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e00b      	b.n	8001b0a <HAL_RCC_OscConfig+0x286>
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x298>)
 8001b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f97b 	bl	8000e0c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b18:	e011      	b.n	8001b3e <HAL_RCC_OscConfig+0x2ba>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	080049f8 	.word	0x080049f8
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f96e 	bl	8000e0c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e280      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4baf      	ldr	r3, [pc, #700]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2a8>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f95e 	bl	8000e0c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f95a 	bl	8000e0c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e26c      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b66:	4ba5      	ldr	r3, [pc, #660]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2d0>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d060      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x310>
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d116      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	4b99      	ldr	r3, [pc, #612]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x328>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e249      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b93      	ldr	r3, [pc, #588]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	4990      	ldr	r1, [pc, #576]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	e040      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d023      	beq.n	8001c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bca:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a8b      	ldr	r2, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff f919 	bl	8000e0c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff f915 	bl	8000e0c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e227      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b7f      	ldr	r3, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	497c      	ldr	r1, [pc, #496]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
 8001c10:	e018      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c12:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a79      	ldr	r2, [pc, #484]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f8f5 	bl	8000e0c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f8f1 	bl	8000e0c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e203      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d03c      	beq.n	8001cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c58:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	4a67      	ldr	r2, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff f8d0 	bl	8000e0c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff f8cc 	bl	8000e0c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1de      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c82:	4b5e      	ldr	r3, [pc, #376]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ef      	beq.n	8001c70 <HAL_RCC_OscConfig+0x3ec>
 8001c90:	e01b      	b.n	8001cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	4a58      	ldr	r2, [pc, #352]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f8b3 	bl	8000e0c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff f8af 	bl	8000e0c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1c1      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ef      	bne.n	8001caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80a6 	beq.w	8001e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d04:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_OscConfig+0x57c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d118      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x57c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x57c>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f876 	bl	8000e0c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7ff f872 	bl	8000e0c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e184      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_RCC_OscConfig+0x57c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4d8>
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5a:	e024      	b.n	8001da6 <HAL_RCC_OscConfig+0x522>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d110      	bne.n	8001d86 <HAL_RCC_OscConfig+0x502>
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d84:	e00f      	b.n	8001da6 <HAL_RCC_OscConfig+0x522>
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff f82d 	bl	8000e0c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff f829 	bl	8000e0c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e139      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_OscConfig+0x578>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ed      	beq.n	8001db6 <HAL_RCC_OscConfig+0x532>
 8001dda:	e01a      	b.n	8001e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f816 	bl	8000e0c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff f812 	bl	8000e0c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d906      	bls.n	8001e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e122      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e04:	4b90      	ldr	r3, [pc, #576]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e8      	bne.n	8001de4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b8b      	ldr	r3, [pc, #556]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a8a      	ldr	r2, [pc, #552]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8108 	beq.w	800203e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	f040 80d0 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e38:	4b83      	ldr	r3, [pc, #524]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d130      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	3b01      	subs	r3, #1
 8001e58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d127      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11f      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e78:	2a07      	cmp	r2, #7
 8001e7a:	bf14      	ite	ne
 8001e7c:	2201      	movne	r2, #1
 8001e7e:	2200      	moveq	r2, #0
 8001e80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d113      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d06e      	beq.n	8001f8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d069      	beq.n	8001f88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eb4:	4b64      	ldr	r3, [pc, #400]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ec0:	4b61      	ldr	r3, [pc, #388]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b7      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001edc:	f7fe ff96 	bl	8000e0c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe ff92 	bl	8000e0c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0a4      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef6:	4b54      	ldr	r3, [pc, #336]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b51      	ldr	r3, [pc, #324]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_RCC_OscConfig+0x7c8>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f12:	3a01      	subs	r2, #1
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1c:	0212      	lsls	r2, r2, #8
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f24:	0852      	lsrs	r2, r2, #1
 8001f26:	3a01      	subs	r2, #1
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f30:	0852      	lsrs	r2, r2, #1
 8001f32:	3a01      	subs	r2, #1
 8001f34:	0652      	lsls	r2, r2, #25
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f3c:	0912      	lsrs	r2, r2, #4
 8001f3e:	0452      	lsls	r2, r2, #17
 8001f40:	430a      	orrs	r2, r1
 8001f42:	4941      	ldr	r1, [pc, #260]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f48:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3e      	ldr	r2, [pc, #248]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f60:	f7fe ff54 	bl	8000e0c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ff50 	bl	8000e0c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e062      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f86:	e05a      	b.n	800203e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e059      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d152      	bne.n	800203e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb0:	f7fe ff2c 	bl	8000e0c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ff28 	bl	8000e0c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e03a      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x734>
 8001fd6:	e032      	b.n	800203e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d02d      	beq.n	800203a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d105      	bne.n	8002002 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8001ffc:	f023 0303 	bic.w	r3, r3, #3
 8002000:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 8002008:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800200c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002010:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7fe fefb 	bl	8000e0c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7fe fef7 	bl	8000e0c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e009      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_OscConfig+0x7c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x796>
 8002038:	e001      	b.n	800203e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	f99d808c 	.word	0xf99d808c

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0c8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4961      	ldr	r1, [pc, #388]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d04c      	beq.n	800213a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a8:	4b56      	ldr	r3, [pc, #344]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d121      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e09e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d115      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e092      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e086      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e07e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	493f      	ldr	r1, [pc, #252]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210a:	f7fe fe7f 	bl	8000e0c <HAL_GetTick>
 800210e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	e00a      	b.n	8002128 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7fe fe7b 	bl	8000e0c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e066      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 020c 	and.w	r2, r3, #12
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	429a      	cmp	r2, r3
 8002138:	d1eb      	bne.n	8002112 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	492c      	ldr	r1, [pc, #176]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4924      	ldr	r1, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e036      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4918      	ldr	r1, [pc, #96]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4910      	ldr	r1, [pc, #64]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c6:	f000 f825 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490c      	ldr	r1, [pc, #48]	; (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fdbe 	bl	8000d6c <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80021f4:	7afb      	ldrb	r3, [r7, #11]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	080049f8 	.word	0x080049f8
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d121      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11e      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002284:	e00a      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d102      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_GetSysClockFreq+0x110>)
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e004      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d101      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_RCC_GetSysClockFreq+0x114>)
 800229a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d134      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0xa6>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d003      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0xac>
 80022b8:	e005      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_RCC_GetSysClockFreq+0x110>)
 80022bc:	617b      	str	r3, [r7, #20]
      break;
 80022be:	e005      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_GetSysClockFreq+0x114>)
 80022c2:	617b      	str	r3, [r7, #20]
      break;
 80022c4:	e002      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	617b      	str	r3, [r7, #20]
      break;
 80022ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	3301      	adds	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	fb02 f203 	mul.w	r2, r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	0e5b      	lsrs	r3, r3, #25
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	3301      	adds	r3, #1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800230c:	69bb      	ldr	r3, [r7, #24]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	08004a10 	.word	0x08004a10
 8002324:	00f42400 	.word	0x00f42400
 8002328:	007a1200 	.word	0x007a1200

0800232c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002348:	f7ff fff0 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCC_GetPCLK1Freq+0x28>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	08004a08 	.word	0x08004a08

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002374:	f7ff ffda 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4904      	ldr	r1, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08004a08 	.word	0x08004a08

0800239c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b4:	f7ff fa02 	bl	80017bc <HAL_PWREx_GetVoltageRange>
 80023b8:	6178      	str	r0, [r7, #20]
 80023ba:	e014      	b.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c6:	6593      	str	r3, [r2, #88]	; 0x58
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d4:	f7ff f9f2 	bl	80017bc <HAL_PWREx_GetVoltageRange>
 80023d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ec:	d10b      	bne.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d919      	bls.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2ba0      	cmp	r3, #160	; 0xa0
 80023f8:	d902      	bls.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fa:	2302      	movs	r3, #2
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	e013      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e010      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d902      	bls.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800240c:	2303      	movs	r3, #3
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e00a      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d102      	bne.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002418:	2302      	movs	r3, #2
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e004      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b70      	cmp	r3, #112	; 0x70
 8002422:	d101      	bne.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002424:	2301      	movs	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 0207 	bic.w	r2, r3, #7
 8002430:	4909      	ldr	r1, [pc, #36]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002464:	2300      	movs	r3, #0
 8002466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002468:	2300      	movs	r3, #0
 800246a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002474:	2b00      	cmp	r3, #0
 8002476:	d041      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002480:	d02a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002482:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002486:	d824      	bhi.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800248e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002492:	d81e      	bhi.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249c:	d010      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800249e:	e018      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a0:	4b86      	ldr	r3, [pc, #536]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a85      	ldr	r2, [pc, #532]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ac:	e015      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fabb 	bl	8002a30 <RCCEx_PLLSAI1_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024be:	e00c      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3320      	adds	r3, #32
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fba6 	bl	8002c18 <RCCEx_PLLSAI2_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d0:	e003      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	74fb      	strb	r3, [r7, #19]
      break;
 80024d6:	e000      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e0:	4b76      	ldr	r3, [pc, #472]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ee:	4973      	ldr	r1, [pc, #460]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024f6:	e001      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d041      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800250c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002510:	d02a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002512:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002516:	d824      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800251e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002522:	d81e      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d010      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800252e:	e018      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002530:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a61      	ldr	r2, [pc, #388]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800253c:	e015      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fa73 	bl	8002a30 <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800254e:	e00c      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3320      	adds	r3, #32
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fb5e 	bl	8002c18 <RCCEx_PLLSAI2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002560:	e003      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	74fb      	strb	r3, [r7, #19]
      break;
 8002566:	e000      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002570:	4b52      	ldr	r3, [pc, #328]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800257e:	494f      	ldr	r1, [pc, #316]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002586:	e001      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a0 	beq.w	80026da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	4a40      	ldr	r2, [pc, #256]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d0:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025dc:	f7fe fc16 	bl	8000e0c <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e2:	e009      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe fc12 	bl	8000e0c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	74fb      	strb	r3, [r7, #19]
        break;
 80025f6:	e005      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15c      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01f      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	d019      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002632:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	4a20      	ldr	r2, [pc, #128]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fbd1 	bl	8000e0c <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266c:	e00b      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe fbcd 	bl	8000e0c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	; 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d902      	bls.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	74fb      	strb	r3, [r7, #19]
            break;
 8002684:	e006      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ec      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026aa:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026b2:	e009      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
 80026b8:	e006      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b9e      	ldr	r3, [pc, #632]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a9d      	ldr	r2, [pc, #628]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e6:	4b98      	ldr	r3, [pc, #608]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f023 0203 	bic.w	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	4994      	ldr	r1, [pc, #592]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 020c 	bic.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	498c      	ldr	r1, [pc, #560]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272a:	4b87      	ldr	r3, [pc, #540]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4983      	ldr	r1, [pc, #524]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800274c:	4b7e      	ldr	r3, [pc, #504]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	497b      	ldr	r1, [pc, #492]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	4972      	ldr	r1, [pc, #456]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002790:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	496a      	ldr	r1, [pc, #424]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b2:	4b65      	ldr	r3, [pc, #404]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	4961      	ldr	r1, [pc, #388]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d4:	4b5c      	ldr	r3, [pc, #368]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	4959      	ldr	r1, [pc, #356]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	4950      	ldr	r1, [pc, #320]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	4948      	ldr	r1, [pc, #288]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	493f      	ldr	r1, [pc, #252]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d028      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	4937      	ldr	r1, [pc, #220]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287a:	d106      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002886:	60d3      	str	r3, [r2, #12]
 8002888:	e011      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002892:	d10c      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f8c8 	bl	8002a30 <RCCEx_PLLSAI1_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	491f      	ldr	r1, [pc, #124]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e4:	60d3      	str	r3, [r2, #12]
 80028e6:	e011      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f0:	d10c      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f899 	bl	8002a30 <RCCEx_PLLSAI1_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02b      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	4908      	ldr	r1, [pc, #32]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002936:	d109      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a02      	ldr	r2, [pc, #8]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002942:	60d3      	str	r3, [r2, #12]
 8002944:	e014      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002954:	d10c      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f867 	bl	8002a30 <RCCEx_PLLSAI1_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02f      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298a:	4928      	ldr	r1, [pc, #160]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800299a:	d10d      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f844 	bl	8002a30 <RCCEx_PLLSAI1_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d014      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	74bb      	strb	r3, [r7, #18]
 80029b6:	e011      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3320      	adds	r3, #32
 80029c6:	2102      	movs	r1, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f925 	bl	8002c18 <RCCEx_PLLSAI2_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f6:	490d      	ldr	r1, [pc, #52]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1a:	4904      	ldr	r1, [pc, #16]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000

08002a30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a3e:	4b75      	ldr	r3, [pc, #468]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d018      	beq.n	8002a7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a4a:	4b72      	ldr	r3, [pc, #456]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0203 	and.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10d      	bne.n	8002a76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
       ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d047      	beq.n	8002b06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e044      	b.n	8002b06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d018      	beq.n	8002ab6 <RCCEx_PLLSAI1_Config+0x86>
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d825      	bhi.n	8002ad4 <RCCEx_PLLSAI1_Config+0xa4>
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d002      	beq.n	8002a92 <RCCEx_PLLSAI1_Config+0x62>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d009      	beq.n	8002aa4 <RCCEx_PLLSAI1_Config+0x74>
 8002a90:	e020      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a92:	4b60      	ldr	r3, [pc, #384]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11d      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e01a      	b.n	8002ada <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e013      	b.n	8002ade <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ab6:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ac2:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ad2:	e006      	b.n	8002ae2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e004      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	430b      	orrs	r3, r1
 8002b00:	4944      	ldr	r1, [pc, #272]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d17d      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a40      	ldr	r2, [pc, #256]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b18:	f7fe f978 	bl	8000e0c <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b1e:	e009      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b20:	f7fe f974 	bl	8000e0c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d902      	bls.n	8002b34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	73fb      	strb	r3, [r7, #15]
        break;
 8002b32:	e005      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ef      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d160      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	0211      	lsls	r1, r2, #8
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	0912      	lsrs	r2, r2, #4
 8002b64:	0452      	lsls	r2, r2, #17
 8002b66:	430a      	orrs	r2, r1
 8002b68:	492a      	ldr	r1, [pc, #168]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	610b      	str	r3, [r1, #16]
 8002b6e:	e027      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d112      	bne.n	8002b9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	0211      	lsls	r1, r2, #8
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6912      	ldr	r2, [r2, #16]
 8002b8c:	0852      	lsrs	r2, r2, #1
 8002b8e:	3a01      	subs	r2, #1
 8002b90:	0552      	lsls	r2, r2, #21
 8002b92:	430a      	orrs	r2, r1
 8002b94:	491f      	ldr	r1, [pc, #124]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	610b      	str	r3, [r1, #16]
 8002b9a:	e011      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ba4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6892      	ldr	r2, [r2, #8]
 8002bac:	0211      	lsls	r1, r2, #8
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6952      	ldr	r2, [r2, #20]
 8002bb2:	0852      	lsrs	r2, r2, #1
 8002bb4:	3a01      	subs	r2, #1
 8002bb6:	0652      	lsls	r2, r2, #25
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	4916      	ldr	r1, [pc, #88]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe f91e 	bl	8000e0c <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bd2:	e009      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd4:	f7fe f91a 	bl	8000e0c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d902      	bls.n	8002be8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	73fb      	strb	r3, [r7, #15]
          break;
 8002be6:	e005      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ef      	beq.n	8002bd4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	4904      	ldr	r1, [pc, #16]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000

08002c18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0203 	and.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d10d      	bne.n	8002c5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
       ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c4a:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
       ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d047      	beq.n	8002cee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e044      	b.n	8002cee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d018      	beq.n	8002c9e <RCCEx_PLLSAI2_Config+0x86>
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d825      	bhi.n	8002cbc <RCCEx_PLLSAI2_Config+0xa4>
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d002      	beq.n	8002c7a <RCCEx_PLLSAI2_Config+0x62>
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d009      	beq.n	8002c8c <RCCEx_PLLSAI2_Config+0x74>
 8002c78:	e020      	b.n	8002cbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c7a:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11d      	bne.n	8002cc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8a:	e01a      	b.n	8002cc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c8c:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d116      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e013      	b.n	8002cc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c9e:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cba:	e006      	b.n	8002cca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e004      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e002      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	4939      	ldr	r1, [pc, #228]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d167      	bne.n	8002dc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d00:	f7fe f884 	bl	8000e0c <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d06:	e009      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d08:	f7fe f880 	bl	8000e0c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d902      	bls.n	8002d1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	73fb      	strb	r3, [r7, #15]
        break;
 8002d1a:	e005      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ef      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d14a      	bne.n	8002dc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	0211      	lsls	r1, r2, #8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	0912      	lsrs	r2, r2, #4
 8002d4c:	0452      	lsls	r2, r2, #17
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	491f      	ldr	r1, [pc, #124]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	614b      	str	r3, [r1, #20]
 8002d56:	e011      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	0211      	lsls	r1, r2, #8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6912      	ldr	r2, [r2, #16]
 8002d6e:	0852      	lsrs	r2, r2, #1
 8002d70:	3a01      	subs	r2, #1
 8002d72:	0652      	lsls	r2, r2, #25
 8002d74:	430a      	orrs	r2, r1
 8002d76:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe f840 	bl	8000e0c <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d8e:	e009      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d90:	f7fe f83c 	bl	8000e0c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	73fb      	strb	r3, [r7, #15]
          break;
 8002da2:	e005      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4904      	ldr	r1, [pc, #16]	; (8002dd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e049      	b.n	8002e7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fe7c 	bl	8000af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 fcda 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f808 	bl	8003eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3e      	ldr	r2, [pc, #248]	; (8002f9c <HAL_TIM_PWM_Stop+0x118>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_TIM_PWM_Stop+0x4a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <HAL_TIM_PWM_Stop+0x11c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIM_PWM_Stop+0x4a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_TIM_PWM_Stop+0x120>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_TIM_PWM_Stop+0x4a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <HAL_TIM_PWM_Stop+0x124>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIM_PWM_Stop+0x4a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a38      	ldr	r2, [pc, #224]	; (8002fac <HAL_TIM_PWM_Stop+0x128>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_PWM_Stop+0x4e>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_TIM_PWM_Stop+0x50>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d017      	beq.n	8002f08 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10f      	bne.n	8002f08 <HAL_TIM_PWM_Stop+0x84>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	f240 4344 	movw	r3, #1092	; 0x444
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_PWM_Stop+0x84>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <HAL_TIM_PWM_Stop+0xb4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	f240 4344 	movw	r3, #1092	; 0x444
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_PWM_Stop+0xb4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <HAL_TIM_PWM_Stop+0xc4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f46:	e023      	b.n	8002f90 <HAL_TIM_PWM_Stop+0x10c>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d104      	bne.n	8002f58 <HAL_TIM_PWM_Stop+0xd4>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f56:	e01b      	b.n	8002f90 <HAL_TIM_PWM_Stop+0x10c>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d104      	bne.n	8002f68 <HAL_TIM_PWM_Stop+0xe4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f66:	e013      	b.n	8002f90 <HAL_TIM_PWM_Stop+0x10c>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d104      	bne.n	8002f78 <HAL_TIM_PWM_Stop+0xf4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f76:	e00b      	b.n	8002f90 <HAL_TIM_PWM_Stop+0x10c>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d104      	bne.n	8002f88 <HAL_TIM_PWM_Stop+0x104>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f86:	e003      	b.n	8002f90 <HAL_TIM_PWM_Stop+0x10c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40013400 	.word	0x40013400
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800

08002fb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_Start_DMA+0x28>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e03c      	b.n	8003052 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d109      	bne.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x42>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e02f      	b.n	8003052 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d109      	bne.n	800300c <HAL_TIM_PWM_Start_DMA+0x5c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e022      	b.n	8003052 <HAL_TIM_PWM_Start_DMA+0xa2>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d109      	bne.n	8003026 <HAL_TIM_PWM_Start_DMA+0x76>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	e015      	b.n	8003052 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d109      	bne.n	8003040 <HAL_TIM_PWM_Start_DMA+0x90>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e008      	b.n	8003052 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	e1a6      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e03c      	b.n	80030ee <HAL_TIM_PWM_Start_DMA+0x13e>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d109      	bne.n	800308e <HAL_TIM_PWM_Start_DMA+0xde>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e02f      	b.n	80030ee <HAL_TIM_PWM_Start_DMA+0x13e>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d109      	bne.n	80030a8 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e022      	b.n	80030ee <HAL_TIM_PWM_Start_DMA+0x13e>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d109      	bne.n	80030c2 <HAL_TIM_PWM_Start_DMA+0x112>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e015      	b.n	80030ee <HAL_TIM_PWM_Start_DMA+0x13e>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d109      	bne.n	80030dc <HAL_TIM_PWM_Start_DMA+0x12c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e008      	b.n	80030ee <HAL_TIM_PWM_Start_DMA+0x13e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Start_DMA+0x152>
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e152      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_TIM_PWM_Start_DMA+0x162>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003110:	e026      	b.n	8003160 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Start_DMA+0x172>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	e01e      	b.n	8003160 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start_DMA+0x182>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003130:	e016      	b.n	8003160 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start_DMA+0x192>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003140:	e00e      	b.n	8003160 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b10      	cmp	r3, #16
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003150:	e006      	b.n	8003160 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800315a:	e001      	b.n	8003160 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e123      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	f200 80ae 	bhi.w	80032c4 <HAL_TIM_PWM_Start_DMA+0x314>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080032c5 	.word	0x080032c5
 8003178:	080032c5 	.word	0x080032c5
 800317c:	080032c5 	.word	0x080032c5
 8003180:	080031ed 	.word	0x080031ed
 8003184:	080032c5 	.word	0x080032c5
 8003188:	080032c5 	.word	0x080032c5
 800318c:	080032c5 	.word	0x080032c5
 8003190:	08003235 	.word	0x08003235
 8003194:	080032c5 	.word	0x080032c5
 8003198:	080032c5 	.word	0x080032c5
 800319c:	080032c5 	.word	0x080032c5
 80031a0:	0800327d 	.word	0x0800327d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	4a81      	ldr	r2, [pc, #516]	; (80033b0 <HAL_TIM_PWM_Start_DMA+0x400>)
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	4a80      	ldr	r2, [pc, #512]	; (80033b4 <HAL_TIM_PWM_Start_DMA+0x404>)
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	4a7f      	ldr	r2, [pc, #508]	; (80033b8 <HAL_TIM_PWM_Start_DMA+0x408>)
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3334      	adds	r3, #52	; 0x34
 80031c8:	461a      	mov	r2, r3
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	f7fd fff4 	bl	80011b8 <HAL_DMA_Start_IT>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0e6      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e8:	60da      	str	r2, [r3, #12]
      break;
 80031ea:	e06c      	b.n	80032c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	4a6f      	ldr	r2, [pc, #444]	; (80033b0 <HAL_TIM_PWM_Start_DMA+0x400>)
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	4a6e      	ldr	r2, [pc, #440]	; (80033b4 <HAL_TIM_PWM_Start_DMA+0x404>)
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3338      	adds	r3, #56	; 0x38
 8003210:	461a      	mov	r2, r3
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	f7fd ffd0 	bl	80011b8 <HAL_DMA_Start_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0c2      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003230:	60da      	str	r2, [r3, #12]
      break;
 8003232:	e048      	b.n	80032c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <HAL_TIM_PWM_Start_DMA+0x400>)
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003242:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a5b      	ldr	r2, [pc, #364]	; (80033b8 <HAL_TIM_PWM_Start_DMA+0x408>)
 800324a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	333c      	adds	r3, #60	; 0x3c
 8003258:	461a      	mov	r2, r3
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	f7fd ffac 	bl	80011b8 <HAL_DMA_Start_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e09e      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003278:	60da      	str	r2, [r3, #12]
      break;
 800327a:	e024      	b.n	80032c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	4a4a      	ldr	r2, [pc, #296]	; (80033b4 <HAL_TIM_PWM_Start_DMA+0x404>)
 800328a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003292:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3340      	adds	r3, #64	; 0x40
 80032a0:	461a      	mov	r2, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	f7fd ff88 	bl	80011b8 <HAL_DMA_Start_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e07a      	b.n	80033a8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c0:	60da      	str	r2, [r3, #12]
      break;
 80032c2:	e000      	b.n	80032c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80032c4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fdec 	bl	8003eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_TIM_PWM_Start_DMA+0x40c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x356>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a37      	ldr	r2, [pc, #220]	; (80033c0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x356>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a35      	ldr	r2, [pc, #212]	; (80033c4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x356>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a34      	ldr	r2, [pc, #208]	; (80033c8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x356>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_TIM_PWM_Start_DMA+0x35c>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01d      	beq.n	8003366 <HAL_TIM_PWM_Start_DMA+0x3b6>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d018      	beq.n	8003366 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a25      	ldr	r2, [pc, #148]	; (80033d0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_TIM_PWM_Start_DMA+0x3b6>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIM_PWM_Start_DMA+0x3b6>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d115      	bne.n	8003392 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800336e:	4013      	ands	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b06      	cmp	r3, #6
 8003376:	d015      	beq.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d011      	beq.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	e008      	b.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e000      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	080036bb 	.word	0x080036bb
 80033b4:	08003763 	.word	0x08003763
 80033b8:	08003629 	.word	0x08003629
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	00010007 	.word	0x00010007

080033e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0fd      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b14      	cmp	r3, #20
 8003406:	f200 80f0 	bhi.w	80035ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003465 	.word	0x08003465
 8003414:	080035eb 	.word	0x080035eb
 8003418:	080035eb 	.word	0x080035eb
 800341c:	080035eb 	.word	0x080035eb
 8003420:	080034a5 	.word	0x080034a5
 8003424:	080035eb 	.word	0x080035eb
 8003428:	080035eb 	.word	0x080035eb
 800342c:	080035eb 	.word	0x080035eb
 8003430:	080034e7 	.word	0x080034e7
 8003434:	080035eb 	.word	0x080035eb
 8003438:	080035eb 	.word	0x080035eb
 800343c:	080035eb 	.word	0x080035eb
 8003440:	08003527 	.word	0x08003527
 8003444:	080035eb 	.word	0x080035eb
 8003448:	080035eb 	.word	0x080035eb
 800344c:	080035eb 	.word	0x080035eb
 8003450:	08003569 	.word	0x08003569
 8003454:	080035eb 	.word	0x080035eb
 8003458:	080035eb 	.word	0x080035eb
 800345c:	080035eb 	.word	0x080035eb
 8003460:	080035a9 	.word	0x080035a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa48 	bl	8003900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0204 	bic.w	r2, r2, #4
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
      break;
 80034a2:	e0a3      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fab8 	bl	8003a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      break;
 80034e4:	e082      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fb21 	bl	8003b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0208 	orr.w	r2, r2, #8
 8003500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0204 	bic.w	r2, r2, #4
 8003510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      break;
 8003524:	e062      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb89 	bl	8003c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	61da      	str	r2, [r3, #28]
      break;
 8003566:	e041      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fbd2 	bl	8003d18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035a6:	e021      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fc16 	bl	8003de0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035e8:	e000      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80035ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364e:	e02a      	b.n	80036a6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	d107      	bne.n	800366a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2202      	movs	r2, #2
 800365e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	e01d      	b.n	80036a6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2204      	movs	r2, #4
 8003678:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003682:	e010      	b.n	80036a6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2208      	movs	r2, #8
 8003692:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800369c:	e003      	b.n	80036a6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff ffb4 	bl	8003614 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	771a      	strb	r2, [r3, #28]
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d10b      	bne.n	80036ea <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d136      	bne.n	800374e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	e031      	b.n	800374e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d10b      	bne.n	800370c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2202      	movs	r2, #2
 80036f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d125      	bne.n	800374e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370a:	e020      	b.n	800374e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	429a      	cmp	r2, r3
 8003714:	d10b      	bne.n	800372e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2204      	movs	r2, #4
 800371a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d114      	bne.n	800374e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800372c:	e00f      	b.n	800374e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d10a      	bne.n	800374e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2208      	movs	r2, #8
 800373c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7fd f802 	bl	8000758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	771a      	strb	r2, [r3, #28]
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d103      	bne.n	8003782 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	771a      	strb	r2, [r3, #28]
 8003780:	e019      	b.n	80037b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d103      	bne.n	8003794 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2202      	movs	r2, #2
 8003790:	771a      	strb	r2, [r3, #28]
 8003792:	e010      	b.n	80037b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d103      	bne.n	80037a6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2204      	movs	r2, #4
 80037a2:	771a      	strb	r2, [r3, #28]
 80037a4:	e007      	b.n	80037b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d102      	bne.n	80037b6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2208      	movs	r2, #8
 80037b4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff ff22 	bl	8003600 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	771a      	strb	r2, [r3, #28]
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <TIM_Base_SetConfig+0x114>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d00f      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3d      	ldr	r2, [pc, #244]	; (80038e4 <TIM_Base_SetConfig+0x118>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <TIM_Base_SetConfig+0x11c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <TIM_Base_SetConfig+0x120>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3a      	ldr	r2, [pc, #232]	; (80038f0 <TIM_Base_SetConfig+0x124>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <TIM_Base_SetConfig+0x114>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <TIM_Base_SetConfig+0x118>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <TIM_Base_SetConfig+0x11c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <TIM_Base_SetConfig+0x120>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <TIM_Base_SetConfig+0x124>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <TIM_Base_SetConfig+0x128>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <TIM_Base_SetConfig+0x12c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a26      	ldr	r2, [pc, #152]	; (80038fc <TIM_Base_SetConfig+0x130>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <TIM_Base_SetConfig+0x114>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00f      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <TIM_Base_SetConfig+0x124>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <TIM_Base_SetConfig+0x128>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <TIM_Base_SetConfig+0x12c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <TIM_Base_SetConfig+0x130>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d103      	bne.n	80038cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	615a      	str	r2, [r3, #20]
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40013400 	.word	0x40013400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800

08003900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 0302 	bic.w	r3, r3, #2
 800394c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <TIM_OC1_SetConfig+0x10c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_OC1_SetConfig+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <TIM_OC1_SetConfig+0x110>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_OC1_SetConfig+0x80>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <TIM_OC1_SetConfig+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_OC1_SetConfig+0x80>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <TIM_OC1_SetConfig+0x118>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_OC1_SetConfig+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <TIM_OC1_SetConfig+0x11c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10c      	bne.n	800399a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 0308 	bic.w	r3, r3, #8
 8003986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <TIM_OC1_SetConfig+0x10c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_OC1_SetConfig+0xc2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <TIM_OC1_SetConfig+0x110>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_OC1_SetConfig+0xc2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <TIM_OC1_SetConfig+0x114>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_OC1_SetConfig+0xc2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <TIM_OC1_SetConfig+0x118>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_OC1_SetConfig+0xc2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <TIM_OC1_SetConfig+0x11c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d111      	bne.n	80039e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40012c00 	.word	0x40012c00
 8003a10:	40013400 	.word	0x40013400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800

08003a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f023 0210 	bic.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0320 	bic.w	r3, r3, #32
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <TIM_OC2_SetConfig+0x100>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_OC2_SetConfig+0x6c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <TIM_OC2_SetConfig+0x104>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10d      	bne.n	8003aa8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <TIM_OC2_SetConfig+0x100>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00f      	beq.n	8003ad0 <TIM_OC2_SetConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <TIM_OC2_SetConfig+0x104>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_OC2_SetConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <TIM_OC2_SetConfig+0x108>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_OC2_SetConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <TIM_OC2_SetConfig+0x10c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_OC2_SetConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <TIM_OC2_SetConfig+0x110>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d113      	bne.n	8003af8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800

08003b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <TIM_OC3_SetConfig+0xfc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_OC3_SetConfig+0x6a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <TIM_OC3_SetConfig+0x100>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10d      	bne.n	8003bba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <TIM_OC3_SetConfig+0xfc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_OC3_SetConfig+0xae>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <TIM_OC3_SetConfig+0x100>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_OC3_SetConfig+0xae>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <TIM_OC3_SetConfig+0x104>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_OC3_SetConfig+0xae>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <TIM_OC3_SetConfig+0x108>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC3_SetConfig+0xae>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <TIM_OC3_SetConfig+0x10c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d113      	bne.n	8003c0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	621a      	str	r2, [r3, #32]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40013400 	.word	0x40013400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800

08003c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <TIM_OC4_SetConfig+0xc0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x84>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <TIM_OC4_SetConfig+0xc4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x84>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a16      	ldr	r2, [pc, #88]	; (8003d0c <TIM_OC4_SetConfig+0xc8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x84>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <TIM_OC4_SetConfig+0xcc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x84>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <TIM_OC4_SetConfig+0xd0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d109      	bne.n	8003cdc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <TIM_OC5_SetConfig+0xb4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00f      	beq.n	8003d92 <TIM_OC5_SetConfig+0x7a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <TIM_OC5_SetConfig+0xb8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_OC5_SetConfig+0x7a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <TIM_OC5_SetConfig+0xbc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_OC5_SetConfig+0x7a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <TIM_OC5_SetConfig+0xc0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC5_SetConfig+0x7a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <TIM_OC5_SetConfig+0xc4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d109      	bne.n	8003da6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	621a      	str	r2, [r3, #32]
}
 8003dc0:	bf00      	nop
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40013400 	.word	0x40013400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	051b      	lsls	r3, r3, #20
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <TIM_OC6_SetConfig+0xb8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00f      	beq.n	8003e5c <TIM_OC6_SetConfig+0x7c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <TIM_OC6_SetConfig+0xbc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_OC6_SetConfig+0x7c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <TIM_OC6_SetConfig+0xc0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_OC6_SetConfig+0x7c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <TIM_OC6_SetConfig+0xc4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC6_SetConfig+0x7c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <TIM_OC6_SetConfig+0xc8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d109      	bne.n	8003e70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800

08003eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e068      	b.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d018      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40013400 	.word	0x40013400
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40014000 	.word	0x40014000

08004008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e040      	b.n	800409c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fc fe12 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f82c 	bl	80040a4 <UART_SetConfig>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 faaa 	bl	80045b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb31 	bl	80046fc <UART_CheckIdleState>
 800409a:	4603      	mov	r3, r0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b5b0      	push	{r4, r5, r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4bad      	ldr	r3, [pc, #692]	; (8004384 <UART_SetConfig+0x2e0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	69f9      	ldr	r1, [r7, #28]
 80040d8:	430b      	orrs	r3, r1
 80040da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4aa2      	ldr	r2, [pc, #648]	; (8004388 <UART_SetConfig+0x2e4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	4313      	orrs	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a99      	ldr	r2, [pc, #612]	; (800438c <UART_SetConfig+0x2e8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d121      	bne.n	800416e <UART_SetConfig+0xca>
 800412a:	4b99      	ldr	r3, [pc, #612]	; (8004390 <UART_SetConfig+0x2ec>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d817      	bhi.n	8004168 <UART_SetConfig+0xc4>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <UART_SetConfig+0x9c>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004151 	.word	0x08004151
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004157 	.word	0x08004157
 800414c:	08004163 	.word	0x08004163
 8004150:	2301      	movs	r3, #1
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	e0e7      	b.n	8004326 <UART_SetConfig+0x282>
 8004156:	2302      	movs	r3, #2
 8004158:	76fb      	strb	r3, [r7, #27]
 800415a:	e0e4      	b.n	8004326 <UART_SetConfig+0x282>
 800415c:	2304      	movs	r3, #4
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e0e1      	b.n	8004326 <UART_SetConfig+0x282>
 8004162:	2308      	movs	r3, #8
 8004164:	76fb      	strb	r3, [r7, #27]
 8004166:	e0de      	b.n	8004326 <UART_SetConfig+0x282>
 8004168:	2310      	movs	r3, #16
 800416a:	76fb      	strb	r3, [r7, #27]
 800416c:	e0db      	b.n	8004326 <UART_SetConfig+0x282>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a88      	ldr	r2, [pc, #544]	; (8004394 <UART_SetConfig+0x2f0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d132      	bne.n	80041de <UART_SetConfig+0x13a>
 8004178:	4b85      	ldr	r3, [pc, #532]	; (8004390 <UART_SetConfig+0x2ec>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d828      	bhi.n	80041d8 <UART_SetConfig+0x134>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0xe8>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d9 	.word	0x080041d9
 8004194:	080041d9 	.word	0x080041d9
 8004198:	080041d9 	.word	0x080041d9
 800419c:	080041cd 	.word	0x080041cd
 80041a0:	080041d9 	.word	0x080041d9
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041d9 	.word	0x080041d9
 80041ac:	080041c7 	.word	0x080041c7
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041d3 	.word	0x080041d3
 80041c0:	2300      	movs	r3, #0
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e0af      	b.n	8004326 <UART_SetConfig+0x282>
 80041c6:	2302      	movs	r3, #2
 80041c8:	76fb      	strb	r3, [r7, #27]
 80041ca:	e0ac      	b.n	8004326 <UART_SetConfig+0x282>
 80041cc:	2304      	movs	r3, #4
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e0a9      	b.n	8004326 <UART_SetConfig+0x282>
 80041d2:	2308      	movs	r3, #8
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e0a6      	b.n	8004326 <UART_SetConfig+0x282>
 80041d8:	2310      	movs	r3, #16
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e0a3      	b.n	8004326 <UART_SetConfig+0x282>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6d      	ldr	r2, [pc, #436]	; (8004398 <UART_SetConfig+0x2f4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d120      	bne.n	800422a <UART_SetConfig+0x186>
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <UART_SetConfig+0x2ec>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f2:	2b30      	cmp	r3, #48	; 0x30
 80041f4:	d013      	beq.n	800421e <UART_SetConfig+0x17a>
 80041f6:	2b30      	cmp	r3, #48	; 0x30
 80041f8:	d814      	bhi.n	8004224 <UART_SetConfig+0x180>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d009      	beq.n	8004212 <UART_SetConfig+0x16e>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d810      	bhi.n	8004224 <UART_SetConfig+0x180>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <UART_SetConfig+0x168>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d006      	beq.n	8004218 <UART_SetConfig+0x174>
 800420a:	e00b      	b.n	8004224 <UART_SetConfig+0x180>
 800420c:	2300      	movs	r3, #0
 800420e:	76fb      	strb	r3, [r7, #27]
 8004210:	e089      	b.n	8004326 <UART_SetConfig+0x282>
 8004212:	2302      	movs	r3, #2
 8004214:	76fb      	strb	r3, [r7, #27]
 8004216:	e086      	b.n	8004326 <UART_SetConfig+0x282>
 8004218:	2304      	movs	r3, #4
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	e083      	b.n	8004326 <UART_SetConfig+0x282>
 800421e:	2308      	movs	r3, #8
 8004220:	76fb      	strb	r3, [r7, #27]
 8004222:	e080      	b.n	8004326 <UART_SetConfig+0x282>
 8004224:	2310      	movs	r3, #16
 8004226:	76fb      	strb	r3, [r7, #27]
 8004228:	e07d      	b.n	8004326 <UART_SetConfig+0x282>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a5b      	ldr	r2, [pc, #364]	; (800439c <UART_SetConfig+0x2f8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d120      	bne.n	8004276 <UART_SetConfig+0x1d2>
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <UART_SetConfig+0x2ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800423e:	2bc0      	cmp	r3, #192	; 0xc0
 8004240:	d013      	beq.n	800426a <UART_SetConfig+0x1c6>
 8004242:	2bc0      	cmp	r3, #192	; 0xc0
 8004244:	d814      	bhi.n	8004270 <UART_SetConfig+0x1cc>
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d009      	beq.n	800425e <UART_SetConfig+0x1ba>
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d810      	bhi.n	8004270 <UART_SetConfig+0x1cc>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0x1b4>
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x1c0>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x1cc>
 8004258:	2300      	movs	r3, #0
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	e063      	b.n	8004326 <UART_SetConfig+0x282>
 800425e:	2302      	movs	r3, #2
 8004260:	76fb      	strb	r3, [r7, #27]
 8004262:	e060      	b.n	8004326 <UART_SetConfig+0x282>
 8004264:	2304      	movs	r3, #4
 8004266:	76fb      	strb	r3, [r7, #27]
 8004268:	e05d      	b.n	8004326 <UART_SetConfig+0x282>
 800426a:	2308      	movs	r3, #8
 800426c:	76fb      	strb	r3, [r7, #27]
 800426e:	e05a      	b.n	8004326 <UART_SetConfig+0x282>
 8004270:	2310      	movs	r3, #16
 8004272:	76fb      	strb	r3, [r7, #27]
 8004274:	e057      	b.n	8004326 <UART_SetConfig+0x282>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a49      	ldr	r2, [pc, #292]	; (80043a0 <UART_SetConfig+0x2fc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d125      	bne.n	80042cc <UART_SetConfig+0x228>
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <UART_SetConfig+0x2ec>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428e:	d017      	beq.n	80042c0 <UART_SetConfig+0x21c>
 8004290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004294:	d817      	bhi.n	80042c6 <UART_SetConfig+0x222>
 8004296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429a:	d00b      	beq.n	80042b4 <UART_SetConfig+0x210>
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d811      	bhi.n	80042c6 <UART_SetConfig+0x222>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <UART_SetConfig+0x20a>
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	d006      	beq.n	80042ba <UART_SetConfig+0x216>
 80042ac:	e00b      	b.n	80042c6 <UART_SetConfig+0x222>
 80042ae:	2300      	movs	r3, #0
 80042b0:	76fb      	strb	r3, [r7, #27]
 80042b2:	e038      	b.n	8004326 <UART_SetConfig+0x282>
 80042b4:	2302      	movs	r3, #2
 80042b6:	76fb      	strb	r3, [r7, #27]
 80042b8:	e035      	b.n	8004326 <UART_SetConfig+0x282>
 80042ba:	2304      	movs	r3, #4
 80042bc:	76fb      	strb	r3, [r7, #27]
 80042be:	e032      	b.n	8004326 <UART_SetConfig+0x282>
 80042c0:	2308      	movs	r3, #8
 80042c2:	76fb      	strb	r3, [r7, #27]
 80042c4:	e02f      	b.n	8004326 <UART_SetConfig+0x282>
 80042c6:	2310      	movs	r3, #16
 80042c8:	76fb      	strb	r3, [r7, #27]
 80042ca:	e02c      	b.n	8004326 <UART_SetConfig+0x282>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2d      	ldr	r2, [pc, #180]	; (8004388 <UART_SetConfig+0x2e4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d125      	bne.n	8004322 <UART_SetConfig+0x27e>
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <UART_SetConfig+0x2ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e4:	d017      	beq.n	8004316 <UART_SetConfig+0x272>
 80042e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0x278>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f0:	d00b      	beq.n	800430a <UART_SetConfig+0x266>
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d811      	bhi.n	800431c <UART_SetConfig+0x278>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x260>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d006      	beq.n	8004310 <UART_SetConfig+0x26c>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x278>
 8004304:	2300      	movs	r3, #0
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e00d      	b.n	8004326 <UART_SetConfig+0x282>
 800430a:	2302      	movs	r3, #2
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	e00a      	b.n	8004326 <UART_SetConfig+0x282>
 8004310:	2304      	movs	r3, #4
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e007      	b.n	8004326 <UART_SetConfig+0x282>
 8004316:	2308      	movs	r3, #8
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e004      	b.n	8004326 <UART_SetConfig+0x282>
 800431c:	2310      	movs	r3, #16
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e001      	b.n	8004326 <UART_SetConfig+0x282>
 8004322:	2310      	movs	r3, #16
 8004324:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <UART_SetConfig+0x2e4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 8087 	bne.w	8004440 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004332:	7efb      	ldrb	r3, [r7, #27]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d837      	bhi.n	80043a8 <UART_SetConfig+0x304>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x29c>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	080043a9 	.word	0x080043a9
 8004348:	0800436d 	.word	0x0800436d
 800434c:	080043a9 	.word	0x080043a9
 8004350:	08004373 	.word	0x08004373
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080043a9 	.word	0x080043a9
 8004360:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fd ffee 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8004368:	6178      	str	r0, [r7, #20]
        break;
 800436a:	e022      	b.n	80043b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <UART_SetConfig+0x300>)
 800436e:	617b      	str	r3, [r7, #20]
        break;
 8004370:	e01f      	b.n	80043b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fd ff4f 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8004376:	6178      	str	r0, [r7, #20]
        break;
 8004378:	e01b      	b.n	80043b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	617b      	str	r3, [r7, #20]
        break;
 8004380:	e017      	b.n	80043b2 <UART_SetConfig+0x30e>
 8004382:	bf00      	nop
 8004384:	efff69f3 	.word	0xefff69f3
 8004388:	40008000 	.word	0x40008000
 800438c:	40013800 	.word	0x40013800
 8004390:	40021000 	.word	0x40021000
 8004394:	40004400 	.word	0x40004400
 8004398:	40004800 	.word	0x40004800
 800439c:	40004c00 	.word	0x40004c00
 80043a0:	40005000 	.word	0x40005000
 80043a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	76bb      	strb	r3, [r7, #26]
        break;
 80043b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80f1 	beq.w	800459c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d305      	bcc.n	80043d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d902      	bls.n	80043dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	76bb      	strb	r3, [r7, #26]
 80043da:	e0df      	b.n	800459c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4618      	mov	r0, r3
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	020b      	lsls	r3, r1, #8
 80043ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043f2:	0202      	lsls	r2, r0, #8
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6849      	ldr	r1, [r1, #4]
 80043f8:	0849      	lsrs	r1, r1, #1
 80043fa:	4608      	mov	r0, r1
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	1814      	adds	r4, r2, r0
 8004402:	eb43 0501 	adc.w	r5, r3, r1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	4620      	mov	r0, r4
 8004412:	4629      	mov	r1, r5
 8004414:	f7fb fed8 	bl	80001c8 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004426:	d308      	bcc.n	800443a <UART_SetConfig+0x396>
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d204      	bcs.n	800443a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e0b0      	b.n	800459c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	76bb      	strb	r3, [r7, #26]
 800443e:	e0ad      	b.n	800459c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d15c      	bne.n	8004504 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800444a:	7efb      	ldrb	r3, [r7, #27]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d828      	bhi.n	80044a2 <UART_SetConfig+0x3fe>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0x3b4>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	080044a3 	.word	0x080044a3
 8004468:	08004493 	.word	0x08004493
 800446c:	080044a3 	.word	0x080044a3
 8004470:	080044a3 	.word	0x080044a3
 8004474:	080044a3 	.word	0x080044a3
 8004478:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fd ff62 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8004480:	6178      	str	r0, [r7, #20]
        break;
 8004482:	e013      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fd ff74 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8004488:	6178      	str	r0, [r7, #20]
        break;
 800448a:	e00f      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <UART_SetConfig+0x510>)
 800448e:	617b      	str	r3, [r7, #20]
        break;
 8004490:	e00c      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7fd febf 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8004496:	6178      	str	r0, [r7, #20]
        break;
 8004498:	e008      	b.n	80044ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449e:	617b      	str	r3, [r7, #20]
        break;
 80044a0:	e004      	b.n	80044ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	76bb      	strb	r3, [r7, #26]
        break;
 80044aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d074      	beq.n	800459c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b0f      	cmp	r3, #15
 80044ce:	d916      	bls.n	80044fe <UART_SetConfig+0x45a>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d212      	bcs.n	80044fe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	89fa      	ldrh	r2, [r7, #14]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	e04e      	b.n	800459c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	76bb      	strb	r3, [r7, #26]
 8004502:	e04b      	b.n	800459c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004504:	7efb      	ldrb	r3, [r7, #27]
 8004506:	2b08      	cmp	r3, #8
 8004508:	d827      	bhi.n	800455a <UART_SetConfig+0x4b6>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x46c>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	0800455b 	.word	0x0800455b
 8004520:	0800454b 	.word	0x0800454b
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800455b 	.word	0x0800455b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fd ff06 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8004538:	6178      	str	r0, [r7, #20]
        break;
 800453a:	e013      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fd ff18 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8004540:	6178      	str	r0, [r7, #20]
        break;
 8004542:	e00f      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <UART_SetConfig+0x510>)
 8004546:	617b      	str	r3, [r7, #20]
        break;
 8004548:	e00c      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fd fe63 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 800454e:	6178      	str	r0, [r7, #20]
        break;
 8004550:	e008      	b.n	8004564 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	617b      	str	r3, [r7, #20]
        break;
 8004558:	e004      	b.n	8004564 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	76bb      	strb	r3, [r7, #26]
        break;
 8004562:	bf00      	nop
    }

    if (pclk != 0U)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085a      	lsrs	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	d908      	bls.n	8004598 <UART_SetConfig+0x4f4>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d204      	bcs.n	8004598 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdb0      	pop	{r4, r5, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	00f42400 	.word	0x00f42400

080045b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d10a      	bne.n	80046ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800470c:	f7fc fb7e 	bl	8000e0c <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d10e      	bne.n	800473e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f82d 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e023      	b.n	8004786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d10e      	bne.n	800476a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f817 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00d      	b.n	8004786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	e05e      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d05a      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fc fb30 	bl	8000e0c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <UART_WaitOnFlagUntilTimeout+0x30>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11b      	bne.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e043      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02c      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d124      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800481c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800482c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d091      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4d0d      	ldr	r5, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2600      	movs	r6, #0
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4d0b      	ldr	r5, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f000 f820 	bl	80048e0 <_init>
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2600      	movs	r6, #0
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08004a48 	.word	0x08004a48
 80048c4:	08004a48 	.word	0x08004a48
 80048c8:	08004a48 	.word	0x08004a48
 80048cc:	08004a4c 	.word	0x08004a4c

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
